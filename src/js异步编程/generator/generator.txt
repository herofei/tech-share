大纲：

1.什么是Generator
    1.1 Generator 函数
        Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。
        执行 Generator 函数会返回一个Generator（生成器）对象，也就是说，Generator 函数除了状态机，还是一个生成器对象生成函数。同时，返回的生成器对象也是个迭代器（遍历器）对象，可以依次遍历 Generator  函数内部的每一个状态。

        Generator 函数有两个（语法）特征：
        (1)function关键字与函数名之间有一个星号;
        (2)函数体内部使用yield表达式，定义不同的内部状态;

    1.2 Generator 对象
        Generator（生成器）对象是个迭代器（遍历器）对象，可以依次遍历 Generator 函数内部的每一个状态。

        Generator 对象有两大特征：
        (1)符合可迭代协议
        (2)符合迭代器协议

    1.3 可迭代协议
        可迭代协议允许 JavaScript 对象去定义或定制它们的迭代行为, 例如（定义）在一个 for..of 结构中什么值可以被循环（得到）。一些内置类型都是内置的可迭代对象并且有默认的迭代行为, 比如 Array or Map, 另一些类型则不是 (比如Object) 。

        为了变成可迭代对象， 一个对象必须实现 @@iterator 方法, 意思是这个对象（或者它原型链prototype chain上的某个对象）必须有一个名字是 Symbol.iterator 的属性。
        当一个对象需要被迭代的时候（比如开始用于一个for..of循环中），它的@@iterator方法被调用并且无参数，然后返回一个用于在迭代中获得值的迭代器。

        [Symbol.iterator]属性：
        返回一个对象的无参函数，被返回对象符合迭代器协议。

    1.4 迭代器协议
        迭代器协议定义了一种标准的方式来产生一个有限或无限序列的值。
        当一个对象被认为是一个迭代器时，它实现了一个 next() 的方法并且该方法拥有以下特性：

        返回一个对象的无参函数，被返回对象拥有两个属性：
        done (boolean)：
            如果迭代器已经经过了被迭代序列时为 true。
            如果迭代器可以产生序列中的下一个值，则为 false。这等效于连同 done 属性也不指定。
        value ：
            迭代器返回的任何 JavaScript 值。done 为 true 时可省略。



2.Generator api
    Generator.prototype.next()
    Generator.prototype.turn()
    Generator.protype.throw()

3.Generator的基本用法
    详看 demo

4.Generator的基本异步处理(异步同步化)
    详看 demo

5.Generator的异步自动化流程管理(自动执行器封装)
    5.1 自动流程管理

        // Promise的链式调用
        Promise.resolve(step1)
        .then(step2)
        .then(step3)
        .then(step4)
        .then(function (value4) {
            // Do something with value4
        }, function (error) {
            // Handle any error from step1 through step4
        })
        .done();

        // 所期盼的依靠Generator函数优化代码运行流程
        function* longRunningTask(value1) {
            try {
                let value2 = yield step1(value1);
                let value3 = yield step2(value2);
                let value4 = yield step3(value3);
                let value5 = yield step4(value4);
                // Do something with value4
            } catch (e) {
                // Handle any error from step1 through step4
            }
        }

    5.2 基于thunk函数的自动执行器
        5.2.1 什么是thunk函数
            编程语言刚刚起步,计算机学家对"求值策略"存在争论：
            var x = 1;

            function f(m){
            return m * 2;
            }

            f(x + 5)
            一种意见是"传值调用"（call by value），即在进入函数体之前，就计算x + 5的值（等于 6），再将这个值传入函数f。
            另一种意见是“传名调用”（call by name），即直接将表达式x + 5传入函数体，只在用到它的时候求值。Haskell 语言采用这种策略。
            两种方法各有利弊。传值调用比较简单，但是对参数求值的时候，实际上还没用到这个参数，有可能造成性能损失。

            编译器的“传名调用”实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。

            JavaScript 语言是传值调用，它的 Thunk 函数含义有所不同。在 JavaScript 语言中，Thunk 函数替换的不是表达式，而是多参数函数，将其替换成一个只接受回调函数作为参数的单参数函数
            如下例子：
            // 正常版本的ajax方法
            ajax(url, callback);

            // Thunk版本的ajax方法（单参数版本）
            var Thunk = function (url) {
                return function (callback) {
                    return ajax(url, callback);
                };
            };

            var request = Thunk(url);
            request(callback);

        5.2.2 thunk函数封装
            var Thunk = function(fn){
                return function (){
                    var args = Array.prototype.slice.call(arguments);
                    return function (callback){
                    args.push(callback);
                    return fn.apply(this, args);
                    }
                };
            };

            var request = Thunk(ajax);
            request(url)(callback);  // doRequest

        5.2.3 自动执行器封装
              见demo

        5.2.4 缺点
            callback需统一放在参数的最后

    5.3 基于Promise对象的自动执行器
        5.3.1 自动执行器封装

        5.3.2 优点
            相比较于thunk函数封装的自动执行，基于Promise封装可以运用Promise的一系列特性，如并行请求,超时处理等等。

6.介绍async/await函数的使用

    async function longRunningTask(value1) {
        let value2 = await stepPromise1(value1);
        let value3 = await stepPromise2(value2);
        let value4 = await stepPromise3(value3);
        let value5 = await stepPromise4(value4);
        return value5;
    }

    longRunningTask(initValue).then(function(data) {
        // use data to do something
    }, function(err) {
        // catch error
    })